"
---
title: CommandButton object (Access)
keywords: vbaac10.chm10554
f1_keywords:
- vbaac10.chm10554
ms.prod: access
api_name:
- Access.CommandButton
ms.assetid: 25e7c0b7-03c1-dffe-8f52-4ec59739f6b8
ms.date: 03/05/2019
localization_priority: Normal
---


# CommandButton object (Access)

This object corresponds to a command button. A command button on a form can start an action or a set of actions. For example, you could create a command button that opens another form. To make a command button do something, you write a macro or event procedure and attach it to the button's **OnClick** property.


## Remarks

|Control|Tool|
|:------|:---|
|![Command button](../images/t-cmdbtn_ZA06053979.gif)|![Command button](../images/command_ZA06047243.gif)|

You can display text on a command button by setting its **Caption** property, or you can display a picture by setting its **Picture** property.

> [!NOTE] 
> You can create over 30 different types of command buttons with the Command Button Wizard. When you use the Command Button Wizard, Microsoft Access creates the button and the event procedure for you.


## Events

- [Click](Access.CommandButton.Click.md)
- [DblClick](Access.CommandButton.DblClick.md)
- [Enter](Access.CommandButton.Enter.md)
- [Exit](Access.CommandButton.Exit.md)
- [GotFocus](Access.CommandButton.GotFocus.md)
- [KeyDown](Access.CommandButton.KeyDown.md)
- [KeyPress](Access.CommandButton.KeyPress.md)
- [KeyUp](Access.CommandButton.KeyUp.md)
- [LostFocus](Access.CommandButton.LostFocus.md)
- [MouseDown](Access.CommandButton.MouseDown.md)
- [MouseMove](Access.CommandButton.MouseMove.md)
- [MouseUp](Access.CommandButton.MouseUp.md)


## Methods

- [Move](Access.CommandButton.Move.md)
- [Requery](Access.CommandButton.Requery.md)
- [SetFocus](Access.CommandButton.SetFocus.md)
- [SizeToFit](Access.CommandButton.SizeToFit.md)


## Properties

- [AddColon](Access.CommandButton.AddColon.md)
- [Alignment](Access.CommandButton.Alignment.md)
- [Application](Access.CommandButton.Application.md)
- [AutoLabel](Access.CommandButton.AutoLabel.md)
- [AutoRepeat](Access.CommandButton.AutoRepeat.md)
- [BackColor](Access.CommandButton.BackColor.md)
- [BackShade](Access.CommandButton.BackShade.md)
- [BackStyle](Access.CommandButton.BackStyle.md)
- [BackThemeColorIndex](Access.CommandButton.BackThemeColorIndex.md)
- [BackTint](Access.CommandButton.BackTint.md)
- [Bevel](Access.CommandButton.Bevel.md)
- [BorderColor](Access.CommandButton.BorderColor.md)
- [BorderShade](Access.CommandButton.BorderShade.md)
- [BorderStyle](Access.CommandButton.BorderStyle.md)
- [BorderThemeColorIndex](Access.CommandButton.BorderThemeColorIndex.md)
- [BorderTint](Access.CommandButton.BorderTint.md)
- [BorderWidth](Access.CommandButton.BorderWidth.md)
- [BottomPadding](Access.CommandButton.BottomPadding.md)
- [Cancel](Access.CommandButton.Cancel.md)
- [Caption](Access.CommandButton.Caption.md)
- [Controls](Access.CommandButton.Controls.md)
- [ControlTipText](Access.CommandButton.ControlTipText.md)
- [ControlType](Access.CommandButton.ControlType.md)
- [CursorOnHover](Access.CommandButton.CursorOnHover.md)
- [Default](Access.CommandButton.Default.md)
- [DisplayWhen](Access.CommandButton.DisplayWhen.md)
- [Enabled](Access.CommandButton.Enabled.md)
- [EventProcPrefix](Access.CommandButton.EventProcPrefix.md)
- [FontBold](Access.CommandButton.FontBold.md)
- [FontItalic](Access.CommandButton.FontItalic.md)
- [FontName](Access.CommandButton.FontName.md)
- [FontSize](Access.CommandButton.FontSize.md)
- [FontUnderline](Access.CommandButton.FontUnderline.md)
- [FontWeight](Access.CommandButton.FontWeight.md)
- [ForeColor](Access.CommandButton.ForeColor.md)
- [ForeShade](Access.CommandButton.ForeShade.md)
- [ForeThemeColorIndex](Access.CommandButton.ForeThemeColorIndex.md)
- [ForeTint](Access.CommandButton.ForeTint.md)
- [Glow](Access.CommandButton.Glow.md)
- [Gradient](Access.CommandButton.Gradient.md)
- [GridlineColor](Access.CommandButton.GridlineColor.md)
- [GridlineShade](Access.CommandButton.GridlineShade.md)
- [GridlineStyleBottom](Access.CommandButton.GridlineStyleBottom.md)
- [GridlineStyleLeft](Access.CommandButton.GridlineStyleLeft.md)
- [GridlineStyleRight](Access.CommandButton.GridlineStyleRight.md)
- [GridlineStyleTop](Access.CommandButton.GridlineStyleTop.md)
- [GridlineThemeColorIndex](Access.CommandButton.GridlineThemeColorIndex.md)
- [GridlineTint](Access.CommandButton.GridlineTint.md)
- [GridlineWidthBottom](Access.CommandButton.GridlineWidthBottom.md)
- [GridlineWidthLeft](Access.CommandButton.GridlineWidthLeft.md)
- [GridlineWidthRight](Access.CommandButton.GridlineWidthRight.md)
- [GridlineWidthTop](Access.CommandButton.GridlineWidthTop.md)
- [Height](Access.CommandButton.Height.md)
- [HelpContextId](Access.CommandButton.HelpContextId.md)
- [HorizontalAnchor](Access.CommandButton.HorizontalAnchor.md)
- [HoverColor](Access.CommandButton.HoverColor.md)
- [HoverForeColor](Access.CommandButton.HoverForeColor.md)
- [HoverForeShade](Access.CommandButton.HoverForeShade.md)
- [HoverForeThemeColorIndex](Access.CommandButton.HoverForeThemeColorIndex.md)
- [HoverForeTint](Access.CommandButton.HoverForeTint.md)
- [HoverShade](Access.CommandButton.HoverShade.md)
- [HoverThemeColorIndex](Access.CommandButton.HoverThemeColorIndex.md)
- [HoverTint](Access.CommandButton.HoverTint.md)
- [Hyperlink](Access.CommandButton.Hyperlink.md)
- [HyperlinkAddress](Access.CommandButton.HyperlinkAddress.md)
- [HyperlinkSubAddress](Access.CommandButton.HyperlinkSubAddress.md)
- [InSelection](Access.CommandButton.InSelection.md)
- [IsVisible](Access.CommandButton.IsVisible.md)
- [LabelAlign](Access.CommandButton.LabelAlign.md)
- [LabelX](Access.CommandButton.LabelX.md)
- [LabelY](Access.CommandButton.LabelY.md)
- [Layout](Access.CommandButton.Layout.md)
- [LayoutID](Access.CommandButton.LayoutID.md)
- [Left](Access.CommandButton.Left.md)
- [LeftPadding](Access.CommandButton.LeftPadding.md)
- [Name](Access.CommandButton.Name.md)
- [ObjectPalette](Access.CommandButton.ObjectPalette.md)
- [OldValue](Access.CommandButton.OldValue.md)
- [OnClick](Access.CommandButton.OnClick.md)
- [OnDblClick](Access.CommandButton.OnDblClick.md)
- [OnEnter](Access.CommandButton.OnEnter.md)
- [OnExit](Access.CommandButton.OnExit.md)
- [OnGotFocus](Access.CommandButton.OnGotFocus.md)
- [OnKeyDown](Access.CommandButton.OnKeyDown.md)
- [OnKeyPress](Access.CommandButton.OnKeyPress.md)
- [OnKeyUp](Access.CommandButton.OnKeyUp.md)
- [OnLostFocus](Access.CommandButton.OnLostFocus.md)
- [OnMouseDown](Access.CommandButton.OnMouseDown.md)
- [OnMouseMove](Access.CommandButton.OnMouseMove.md)
- [OnMouseUp](Access.CommandButton.OnMouseUp.md)
- [OnPush](Access.CommandButton.OnPush.md)
- [Parent](Access.CommandButton.Parent.md)
- [Picture](Access.CommandButton.Picture.md)
- [PictureCaptionArrangement](Access.CommandButton.PictureCaptionArrangement.md)
- [PictureData](Access.CommandButton.PictureData.md)
- [PictureType](Access.CommandButton.PictureType.md)
- [PressedColor](Access.CommandButton.PressedColor.md)
- [PressedForeColor](Access.CommandButton.PressedForeColor.md)
- [PressedForeShade](Access.CommandButton.PressedForeShade.md)
- [PressedForeThemeColorIndex](Access.CommandButton.PressedForeThemeColorIndex.md)
- [PressedForeTint](Access.CommandButton.PressedForeTint.md)
- [PressedShade](Access.CommandButton.PressedShade.md)
- [PressedThemeColorIndex](Access.CommandButton.PressedThemeColorIndex.md)
- [PressedTint](Access.CommandButton.PressedTint.md)
- [Properties](Access.CommandButton.Properties.md)
- [QuickStyle](Access.CommandButton.QuickStyle.md)
- [QuickStyleMask](Access.commandbutton.quickstylemask.md)
- [ReadingOrder](Access.CommandButton.ReadingOrder.md)
- [RightPadding](Access.CommandButton.RightPadding.md)
- [Section](Access.CommandButton.Section.md)
- [Shadow](Access.CommandButton.Shadow.md)
- [Shape](Access.CommandButton.Shape.md)
- [ShortcutMenuBar](Access.CommandButton.ShortcutMenuBar.md)
- [SoftEdges](Access.CommandButton.SoftEdges.md)
- [StatusBarText](Access.CommandButton.StatusBarText.md)
- [TabIndex](Access.CommandButton.TabIndex.md)
- [TabStop](Access.CommandButton.TabStop.md)
- [Tag](Access.CommandButton.Tag.md)
- [ThemeFontIndex](Access.CommandButton.ThemeFontIndex.md)
- [Top](Access.CommandButton.Top.md)
- [TopPadding](Access.CommandButton.TopPadding.md)
- [Transparent](Access.CommandButton.Transparent.md)
- [UseTheme](Access.CommandButton.UseTheme.md)
- [VerticalAnchor](Access.CommandButton.VerticalAnchor.md)
- [Visible](Access.CommandButton.Visible.md)
- [Width](Access.CommandButton.Width.md)


## See also

- [Access Object Model Reference](overview/Access/object-model.md)



[!include[Support and feedback](~/includes/feedback-boilerplate.md)]

"
Class {
	#name : #JinControlCommandButton,
	#superclass : #JinControlAbstractCommandButton,
	#category : #'Jindao-DomainObjects-GeneratedControls'
}

{ #category : #generated }
JinControlCommandButton class >> mappedTypeName [
	^#'_CommandButton'
]

{ #category : #generated }
JinControlCommandButton >> acceptVisitor: aVisitor [
	^ aVisitor visitCommandButton: self
]

{ #category : #'property - generated' }
JinControlCommandButton >> addColon [
<getter>
	^ (handle propertyNamed: #'AddColon' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> addColon: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'AddColon' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> alignment [
<getter>
	^ (handle propertyNamed: #'Alignment' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> alignment: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Alignment' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> application [
<getter>
	^ (handle propertyNamed: #'Application' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> autoLabel [
<getter>
	^ (handle propertyNamed: #'AutoLabel' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> autoLabel: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'AutoLabel' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> autoRepeat [
<getter>
	^ (handle propertyNamed: #'AutoRepeat' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> autoRepeat: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'AutoRepeat' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> backColor [
<getter>
	^ (handle propertyNamed: #'BackColor' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> backColor: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'BackColor' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> backShade [
<getter>
	^ (handle propertyNamed: #'BackShade' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> backShade: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'BackShade' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> backStyle [
<getter>
	^ (handle propertyNamed: #'BackStyle' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> backStyle: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'BackStyle' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> backThemeColorIndex [
<getter>
	^ (handle propertyNamed: #'BackThemeColorIndex' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> backThemeColorIndex: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'BackThemeColorIndex' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> backTint [
<getter>
	^ (handle propertyNamed: #'BackTint' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> backTint: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'BackTint' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> bevel [
<getter>
	^ (handle propertyNamed: #'Bevel' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> bevel: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Bevel' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> borderColor [
<getter>
	^ (handle propertyNamed: #'BorderColor' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> borderColor: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'BorderColor' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> borderShade [
<getter>
	^ (handle propertyNamed: #'BorderShade' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> borderShade: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'BorderShade' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> borderStyle [
<getter>
	^ (handle propertyNamed: #'BorderStyle' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> borderStyle: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'BorderStyle' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> borderThemeColorIndex [
<getter>
	^ (handle propertyNamed: #'BorderThemeColorIndex' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> borderThemeColorIndex: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'BorderThemeColorIndex' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> borderTint [
<getter>
	^ (handle propertyNamed: #'BorderTint' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> borderTint: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'BorderTint' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> borderWidth [
<getter>
	^ (handle propertyNamed: #'BorderWidth' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> borderWidth: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'BorderWidth' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> bottomPadding [
<getter>
	^ (handle propertyNamed: #'BottomPadding' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> bottomPadding: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'BottomPadding' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> cancel [
<getter>
	^ (handle propertyNamed: #'Cancel' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> cancel: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Cancel' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> caption [
<getter>
	^ (handle propertyNamed: #'Caption' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> caption: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Caption' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> controlTipText [
<getter>
	^ (handle propertyNamed: #'ControlTipText' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> controlTipText: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'ControlTipText' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> controlType [
<getter>
	^ (handle propertyNamed: #'ControlType' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> controlType: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'ControlType' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> controls [
<getter>
	^ (handle propertyNamed: #'Controls' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> cursorOnHover [
<getter>
	^ (handle propertyNamed: #'CursorOnHover' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> cursorOnHover: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'CursorOnHover' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> default [
<getter>
	^ (handle propertyNamed: #'Default' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> default: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Default' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> displayWhen [
<getter>
	^ (handle propertyNamed: #'DisplayWhen' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> displayWhen: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'DisplayWhen' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> enabled [
<getter>
	^ (handle propertyNamed: #'Enabled' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> enabled: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Enabled' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> eventProcPrefix [
<getter>
	^ (handle propertyNamed: #'EventProcPrefix' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> eventProcPrefix: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'EventProcPrefix' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> fontBold [
<getter>
	^ (handle propertyNamed: #'FontBold' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> fontBold: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'FontBold' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> fontItalic [
<getter>
	^ (handle propertyNamed: #'FontItalic' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> fontItalic: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'FontItalic' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> fontName [
<getter>
	^ (handle propertyNamed: #'FontName' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> fontName: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'FontName' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> fontSize [
<getter>
	^ (handle propertyNamed: #'FontSize' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> fontSize: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'FontSize' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> fontUnderline [
<getter>
	^ (handle propertyNamed: #'FontUnderline' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> fontUnderline: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'FontUnderline' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> fontWeight [
<getter>
	^ (handle propertyNamed: #'FontWeight' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> fontWeight: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'FontWeight' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> foreColor [
<getter>
	^ (handle propertyNamed: #'ForeColor' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> foreColor: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'ForeColor' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> foreShade [
<getter>
	^ (handle propertyNamed: #'ForeShade' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> foreShade: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'ForeShade' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> foreThemeColorIndex [
<getter>
	^ (handle propertyNamed: #'ForeThemeColorIndex' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> foreThemeColorIndex: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'ForeThemeColorIndex' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> foreTint [
<getter>
	^ (handle propertyNamed: #'ForeTint' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> foreTint: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'ForeTint' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> glow [
<getter>
	^ (handle propertyNamed: #'Glow' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> glow: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Glow' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gradient [
<getter>
	^ (handle propertyNamed: #'Gradient' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gradient: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Gradient' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineColor [
<getter>
	^ (handle propertyNamed: #'GridlineColor' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineColor: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'GridlineColor' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineShade [
<getter>
	^ (handle propertyNamed: #'GridlineShade' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineShade: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'GridlineShade' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineStyleBottom [
<getter>
	^ (handle propertyNamed: #'GridlineStyleBottom' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineStyleBottom: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'GridlineStyleBottom' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineStyleLeft [
<getter>
	^ (handle propertyNamed: #'GridlineStyleLeft' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineStyleLeft: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'GridlineStyleLeft' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineStyleRight [
<getter>
	^ (handle propertyNamed: #'GridlineStyleRight' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineStyleRight: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'GridlineStyleRight' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineStyleTop [
<getter>
	^ (handle propertyNamed: #'GridlineStyleTop' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineStyleTop: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'GridlineStyleTop' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineThemeColorIndex [
<getter>
	^ (handle propertyNamed: #'GridlineThemeColorIndex' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineThemeColorIndex: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'GridlineThemeColorIndex' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineTint [
<getter>
	^ (handle propertyNamed: #'GridlineTint' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineTint: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'GridlineTint' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineWidthBottom [
<getter>
	^ (handle propertyNamed: #'GridlineWidthBottom' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineWidthBottom: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'GridlineWidthBottom' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineWidthLeft [
<getter>
	^ (handle propertyNamed: #'GridlineWidthLeft' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineWidthLeft: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'GridlineWidthLeft' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineWidthRight [
<getter>
	^ (handle propertyNamed: #'GridlineWidthRight' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineWidthRight: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'GridlineWidthRight' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineWidthTop [
<getter>
	^ (handle propertyNamed: #'GridlineWidthTop' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> gridlineWidthTop: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'GridlineWidthTop' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> height [
<getter>
	^ (handle propertyNamed: #'Height' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> height: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Height' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> helpContextId [
<getter>
	^ (handle propertyNamed: #'HelpContextId' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> helpContextId: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'HelpContextId' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> horizontalAnchor [
<getter>
	^ (handle propertyNamed: #'HorizontalAnchor' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> horizontalAnchor: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'HorizontalAnchor' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverColor [
<getter>
	^ (handle propertyNamed: #'HoverColor' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverColor: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'HoverColor' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverForeColor [
<getter>
	^ (handle propertyNamed: #'HoverForeColor' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverForeColor: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'HoverForeColor' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverForeShade [
<getter>
	^ (handle propertyNamed: #'HoverForeShade' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverForeShade: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'HoverForeShade' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverForeThemeColorIndex [
<getter>
	^ (handle propertyNamed: #'HoverForeThemeColorIndex' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverForeThemeColorIndex: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'HoverForeThemeColorIndex' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverForeTint [
<getter>
	^ (handle propertyNamed: #'HoverForeTint' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverForeTint: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'HoverForeTint' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverShade [
<getter>
	^ (handle propertyNamed: #'HoverShade' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverShade: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'HoverShade' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverThemeColorIndex [
<getter>
	^ (handle propertyNamed: #'HoverThemeColorIndex' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverThemeColorIndex: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'HoverThemeColorIndex' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverTint [
<getter>
	^ (handle propertyNamed: #'HoverTint' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hoverTint: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'HoverTint' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hyperlink [
<getter>
	^ (handle propertyNamed: #'Hyperlink' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hyperlinkAddress [
<getter>
	^ (handle propertyNamed: #'HyperlinkAddress' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hyperlinkAddress: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'HyperlinkAddress' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hyperlinkSubAddress [
<getter>
	^ (handle propertyNamed: #'HyperlinkSubAddress' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> hyperlinkSubAddress: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'HyperlinkSubAddress' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> inSelection [
<getter>
	^ (handle propertyNamed: #'InSelection' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> inSelection: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'InSelection' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> isVisible [
<getter>
	^ (handle propertyNamed: #'IsVisible' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> isVisible: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'IsVisible' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> labelAlign [
<getter>
	^ (handle propertyNamed: #'LabelAlign' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> labelAlign: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'LabelAlign' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> labelX [
<getter>
	^ (handle propertyNamed: #'LabelX' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> labelX: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'LabelX' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> labelY [
<getter>
	^ (handle propertyNamed: #'LabelY' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> labelY: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'LabelY' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> layout [
<getter>
	^ (handle propertyNamed: #'Layout' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> layoutID [
<getter>
	^ (handle propertyNamed: #'LayoutID' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> left [
<getter>
	^ (handle propertyNamed: #'Left' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> left: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Left' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> leftPadding [
<getter>
	^ (handle propertyNamed: #'LeftPadding' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> leftPadding: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'LeftPadding' withArguments: {aParam1} ).

]

{ #category : #'method - generated' }
JinControlCommandButton >> move: aLeft top: aTop width: aWidth height: aHeight [
<method>
"This method can be called with optional parameters. Top,Width,Height"
	^ (handle dispatch: #'Move' withArguments: {aLeft . aTop . aWidth . aHeight} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> name [
<getter>
	^ (handle propertyNamed: #'Name' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> name: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Name' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> objectPalette [
<getter>
	^ (handle propertyNamed: #'ObjectPalette' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> objectPalette: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'ObjectPalette' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> oldValue [
<getter>
	^ (handle propertyNamed: #'OldValue' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onClick [
<getter>
	^ (handle propertyNamed: #'OnClick' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onClick: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'OnClick' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onDblClick [
<getter>
	^ (handle propertyNamed: #'OnDblClick' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onDblClick: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'OnDblClick' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onEnter [
<getter>
	^ (handle propertyNamed: #'OnEnter' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onEnter: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'OnEnter' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onExit [
<getter>
	^ (handle propertyNamed: #'OnExit' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onExit: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'OnExit' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onGotFocus [
<getter>
	^ (handle propertyNamed: #'OnGotFocus' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onGotFocus: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'OnGotFocus' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onKeyDown [
<getter>
	^ (handle propertyNamed: #'OnKeyDown' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onKeyDown: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'OnKeyDown' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onKeyPress [
<getter>
	^ (handle propertyNamed: #'OnKeyPress' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onKeyPress: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'OnKeyPress' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onKeyUp [
<getter>
	^ (handle propertyNamed: #'OnKeyUp' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onKeyUp: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'OnKeyUp' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onLostFocus [
<getter>
	^ (handle propertyNamed: #'OnLostFocus' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onLostFocus: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'OnLostFocus' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onMouseDown [
<getter>
	^ (handle propertyNamed: #'OnMouseDown' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onMouseDown: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'OnMouseDown' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onMouseMove [
<getter>
	^ (handle propertyNamed: #'OnMouseMove' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onMouseMove: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'OnMouseMove' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onMouseUp [
<getter>
	^ (handle propertyNamed: #'OnMouseUp' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onMouseUp: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'OnMouseUp' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onPush [
<getter>
	^ (handle propertyNamed: #'OnPush' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> onPush: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'OnPush' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> parent [
<getter>
	^ (handle propertyNamed: #'Parent' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> picture [
<getter>
	^ (handle propertyNamed: #'Picture' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> picture: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Picture' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pictureCaptionArrangement [
<getter>
	^ (handle propertyNamed: #'PictureCaptionArrangement' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pictureCaptionArrangement: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'PictureCaptionArrangement' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pictureData [
<getter>
	^ (handle propertyNamed: #'PictureData' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pictureData: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'PictureData' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pictureType [
<getter>
	^ (handle propertyNamed: #'PictureType' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pictureType: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'PictureType' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedColor [
<getter>
	^ (handle propertyNamed: #'PressedColor' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedColor: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'PressedColor' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedForeColor [
<getter>
	^ (handle propertyNamed: #'PressedForeColor' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedForeColor: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'PressedForeColor' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedForeShade [
<getter>
	^ (handle propertyNamed: #'PressedForeShade' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedForeShade: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'PressedForeShade' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedForeThemeColorIndex [
<getter>
	^ (handle propertyNamed: #'PressedForeThemeColorIndex' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedForeThemeColorIndex: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'PressedForeThemeColorIndex' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedForeTint [
<getter>
	^ (handle propertyNamed: #'PressedForeTint' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedForeTint: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'PressedForeTint' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedShade [
<getter>
	^ (handle propertyNamed: #'PressedShade' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedShade: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'PressedShade' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedThemeColorIndex [
<getter>
	^ (handle propertyNamed: #'PressedThemeColorIndex' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedThemeColorIndex: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'PressedThemeColorIndex' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedTint [
<getter>
	^ (handle propertyNamed: #'PressedTint' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> pressedTint: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'PressedTint' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> properties [
<getter>
	^ (handle propertyNamed: #'Properties' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> quickStyle [
<getter>
	^ (handle propertyNamed: #'QuickStyle' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> quickStyle: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'QuickStyle' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> readingOrder [
<getter>
	^ (handle propertyNamed: #'ReadingOrder' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> readingOrder: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'ReadingOrder' withArguments: {aParam1} ).

]

{ #category : #'method - generated' }
JinControlCommandButton >> requery [
<method>
	^ (handle dispatch: #'Requery' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> rightPadding [
<getter>
	^ (handle propertyNamed: #'RightPadding' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> rightPadding: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'RightPadding' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> section [
<getter>
	^ (handle propertyNamed: #'Section' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> section: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Section' withArguments: {aParam1} ).

]

{ #category : #'method - generated' }
JinControlCommandButton >> setFocus [
<method>
	^ (handle dispatch: #'SetFocus' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> shadow [
<getter>
	^ (handle propertyNamed: #'Shadow' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> shadow: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Shadow' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> shape [
<getter>
	^ (handle propertyNamed: #'Shape' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> shape: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Shape' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> shortcutMenuBar [
<getter>
	^ (handle propertyNamed: #'ShortcutMenuBar' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> shortcutMenuBar: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'ShortcutMenuBar' withArguments: {aParam1} ).

]

{ #category : #'method - generated' }
JinControlCommandButton >> sizeToFit [
<method>
	^ (handle dispatch: #'SizeToFit' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> softEdges [
<getter>
	^ (handle propertyNamed: #'SoftEdges' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> softEdges: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'SoftEdges' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> statusBarText [
<getter>
	^ (handle propertyNamed: #'StatusBarText' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> statusBarText: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'StatusBarText' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> tabIndex [
<getter>
	^ (handle propertyNamed: #'TabIndex' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> tabIndex: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'TabIndex' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> tabStop [
<getter>
	^ (handle propertyNamed: #'TabStop' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> tabStop: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'TabStop' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> tag [
<getter>
	^ (handle propertyNamed: #'Tag' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> tag: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Tag' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> themeFontIndex [
<getter>
	^ (handle propertyNamed: #'ThemeFontIndex' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> themeFontIndex: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'ThemeFontIndex' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> top [
<getter>
	^ (handle propertyNamed: #'Top' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> top: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Top' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> topPadding [
<getter>
	^ (handle propertyNamed: #'TopPadding' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> topPadding: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'TopPadding' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> transparent [
<getter>
	^ (handle propertyNamed: #'Transparent' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> transparent: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Transparent' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> useTheme [
<getter>
	^ (handle propertyNamed: #'UseTheme' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> useTheme: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'UseTheme' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> verticalAnchor [
<getter>
	^ (handle propertyNamed: #'VerticalAnchor' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> verticalAnchor: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'VerticalAnchor' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> visible [
<getter>
	^ (handle propertyNamed: #'Visible' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> visible: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Visible' withArguments: {aParam1} ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> width [
<getter>
	^ (handle propertyNamed: #'Width' ).

]

{ #category : #'property - generated' }
JinControlCommandButton >> width: aParam1 [
<setter>
		
	^ (handle propertyNamed: #'Width' withArguments: {aParam1} ).

]
